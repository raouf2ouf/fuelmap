/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.8
  Forc version: 0.64.0
  Fuel-Core version: 0.36.0
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { FuelmapInstance } from "./FuelmapInstance";

const bytecode = decompressBytecode("H4sIAAAAAAAAA61Vz08TURCe1or1YHgR0LoEXbWQetEaielxN93NdimEF7lwcCmJscEESimFkHjpkSMYf3DkD/CwbT147JGLsSejtyZeJKFJD5pAOOD39gfdQPFkE9Jh3sz3zXwz71XqJKlMFCbn07dpnTRC7ORE+Eg64LRNl/ZKCk3k2hSSlHnC97Jl2MtW2g6VMhQdVuPE1EHhX4FvRdonkg+f0OxxK8yPW5EyheJSuinOV3G+yg27ATvG07V5kZ9QByvcqJNj65EKuEyck8dVRE4RfM75sB5XmBpR4C/BX+rBddXjKuO8zI2qsGVwLQS4kj4XT9eTwM5bOkMc2xC2w5MZrDB9sAJfHr4NfC8hb8HK2kt82v5e4sifukxcTUYdWx0inrZZSSOWUMcVxNqlSdh6pIE68sMa8Ny68+C0uVErgkecixq4Y4vaYKPmjn8m7bMz/dFP0Z+ohWftPeDd4qocBZforYEaZLeGOGqoVboctS2fwzI6YaazBs/WRR5LmJEGn6lHgWejzxvQ/xpwb/J0NRPAYi6W1qumb5KBmrI12ceT9uWzMV+kbJMGoOkAtJYyROsa3QOu8g/cHwIXNa0hztWotyZfvZkX0GfSrVlTzu8GffTiFjGTNcy1gHkuPjAjz9YzFEbfr58q53Kant6xOZ0w43rsuUpU0iI0pmFHtSL6rsqoMS58+B7NHdAYdjwJLWIJPQ6dq7OObWI+Rm034Bc74vntTNdv//L91ow9Yk3bt1HrHWYyZciMN1BrCHVdhh7h4anxytgkUWIE/fIiMVNT5kzCfWSYWbWYaysPc+3kI/ScxG6I+xZz70B1x7Hd3fjc9ddTXX89hbi97v/2RiA/6vuh5V2uM4Z+NsHz+Mw+bgV2qBnYx9bpzht1OXAXZMSJu37RrO9785DB13L3zdFP6IocoV+t0/VXU74fGiau60wZVRm9I7ryPuq+b1J6lySjRevwibs/YMqK2AcLcwZfSMzbeQv/4O+I0Q7yPiB24pAETr+Ps02k+FiY4eldwF6xRDsu3gfx7rBE+lMF58w/h359AvuNyO/i9/fATwXwT/MD+K6OAh9ciPHmgN7xVnscqf/J4byjsIHv6HMBfqirdYuk37j/R+THhESMAX3LL1fLufxa4UX51XLB/THCJ/L2L8GcAF2gBgAA");

export class FuelmapInstanceFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, FuelmapInstance.abi, accountOrProvider);
  }

  deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: FuelmapInstance.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<FuelmapInstance>> {
    const factory = new FuelmapInstanceFactory(wallet);
    return factory.deploy(options);
  }
}
